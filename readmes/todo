############################################################

V1 Specification, user stories, etc:
√ Log in
√ Log out
X Schedule push to all
X View scheduled messages
X View sent messages and status
X View users / registered devices/tokens
X Client framework for server communication


Future specifications:
X Group users into different groups
X Send push to specific user groups
X Geolocation
X Send push to users at certain locations


############################################################

Backend:

Mobile Client API:
√ /gcm/registerToken:
√ /gcm/unRegisterToken:


Web Client API:
√ /auth/login
√ /auth/logout

X /push/new_message POST:
√ 0) Validate input and populate template with errors in case of error
X When invalid input, return which field is refers to
X When invalid input, return already entered data in order to pre-populate fields

X Misc) 
√ Allow admin to select a scheduled for date in /push/new_message UI
√ Persist a notification_template when administrator creates a message in the web UI (and update appropriate fields, such as ScheduledFor, Title, Body, Etc) 

X Create 'view notifications' template (ability to filter on all, unsent, and sent)
X Move notification_scheduler into src, and invoke it from init?
X Write tests!!!


############################################################

Frontend:

Web Client:
/push/new_message
X Disable 'send' button if no input is entered
X Red font color if error
X Pre populate fields with previous input

############################################################

MISC:

Todo:
X cb_admin 

Refactor:
X Change format {atom, {{}, {}}}, to {atom, [{},{}]} 
X Replace deprecated method erlang:now/0 with erlang:timestamp/0

Tests
X Fix tests that failed after login
X Eunit Test admin, auth_lib, session_lib, device_service, ,
X Functional Test push_controller, auth_controller, lost_controller

X How localize web client?

############################################################

- Mobile client framework:
  - clientId,
  - deviceString
  - iOSVersion
  - frameworkVersion?
  - gcmToken
   
- Server user model:
  - Id
  - clientId
  - deviceString
  - frameworkVersion
  - gcmToken






############################################################
#
Notification scheduling:
- A device has many notifications (that have been received)
- A notification_template has many notifications (that have been sent) 
- A notification has one device (the receiver) and one template (the contents, etc)


- USE calendar:local_time() format! (DateTime, {{Year, Month, Day}, {Hour, Minute, Second}}, e.g. {{2016,3,14},{12,26,36}}
1) Admin creates a new notification template through the web UI, containing title, body, scheduledFor
2) A bg-timer checks for notification_templates that have not been sent and whos scheuledFor has passed.
2.2) For each found notification, update 'sentAt' and send them.
2.3) Upon receiving response, persist a 'notification' object, tied to the 'notification_template', and to the receiving 'device'. 
The 'notification' object also contains status, (TODO: add send timestamp?).

When parsing the response: 
- mark invalid tokens as removed
- update old tokens if we receive new

